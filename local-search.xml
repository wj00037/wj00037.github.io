<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>SQL高级语法</title>
    <link href="/2024/03/11/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/"/>
    <url>/2024/03/11/SQL%E9%AB%98%E7%BA%A7%E8%AF%AD%E6%B3%95/</url>
    
    <content type="html"><![CDATA[<h1 id="SQL高级语法"><a href="#SQL高级语法" class="headerlink" title="SQL高级语法"></a>SQL高级语法</h1><h2 id="LIKE-–-查找类似值"><a href="#LIKE-–-查找类似值" class="headerlink" title="LIKE – 查找类似值"></a>LIKE – 查找类似值</h2><p>LIKE 操作符用于在 WHERE 子句根据指定模式进行匹配查询。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名<span class="hljs-operator">/</span>(<span class="hljs-operator">*</span>) <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称 <span class="hljs-keyword">LIKE</span> 值;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><p>查找City列以“N”开头的行&#x2F;包含“on”的行</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> City <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;N%&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> City <span class="hljs-keyword">LIKE</span> <span class="hljs-string">&#x27;%on%&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>“%”代表零个或多个字符；“_”代表单个字符</p></blockquote><h2 id="IN-–-锁定多个值"><a href="#IN-–-锁定多个值" class="headerlink" title="IN – 锁定多个值"></a>IN – 锁定多个值</h2><p>IN 用于检查某个字段的值是否包含在给定的集合中。它常常用来替代多个 OR 条件，使得查询更加简洁。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">IN</span> (value1, value2, ...);<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><p>查询 department 为 Sales 或 Marketing 的所有员工的 name 和 age：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, age<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department <span class="hljs-keyword">IN</span> (<span class="hljs-string">&#x27;Sales&#x27;</span>, <span class="hljs-string">&#x27;Marketing&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="BETWEEN-–-选取区间数据"><a href="#BETWEEN-–-选取区间数据" class="headerlink" title="BETWEEN – 选取区间数据"></a>BETWEEN – 选取区间数据</h2><p>BETWEEN … AND 用于在查询中指定一个范围，通常用于 DATE、NUMERIC 或 TEXT 类型的字段。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> column_name <span class="hljs-keyword">BETWEEN</span> value1 <span class="hljs-keyword">AND</span> value2;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name, salary<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> salary <span class="hljs-keyword">BETWEEN</span> <span class="hljs-number">50000</span> <span class="hljs-keyword">AND</span> <span class="hljs-number">100000</span>;<br></code></pre></td></tr></table></figure><h2 id="AS-–-别名"><a href="#AS-–-别名" class="headerlink" title="AS – 别名"></a>AS – 别名</h2><p>AS可以为列名称和表名称指定别名（Alias），使查询程序更易阅读和书写。</p><p style="color:blue">语法：</p><p>表别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">AS</span> 别名;<br></code></pre></td></tr></table></figure><p>列别名：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">as</span> 别名 <span class="hljs-keyword">FROM</span> 表名称;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> first_name <span class="hljs-keyword">AS</span> Name, last_name <span class="hljs-keyword">AS</span> Surname<br><span class="hljs-keyword">FROM</span> employees;<br></code></pre></td></tr></table></figure><h2 id="JOIN-–-多表关联"><a href="#JOIN-–-多表关联" class="headerlink" title="JOIN – 多表关联"></a>JOIN – 多表关联</h2><p>JOIN 用于将两个或多个表的数据组合在一起。常见的 JOIN 类型有：INNER JOIN、LEFT JOIN、RIGHT JOIN 和 FULL JOIN。</p><ul><li>INNER JOIN：返回两个表中匹配的行。</li><li>LEFT JOIN（或 LEFT OUTER JOIN）：返回左表所有的行，即使右表没有匹配的行。</li><li>RIGHT JOIN（或 RIGHT OUTER JOIN）：返回右表所有的行，即使左表没有匹配的行。</li><li>FULL JOIN（或 FULL OUTER JOIN）：返回左右表的所有行，不管是否有匹配。</li></ul><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">select</span> 列名<br><span class="hljs-keyword">from</span> 表A<br><span class="hljs-keyword">INNER</span><span class="hljs-operator">|</span><span class="hljs-keyword">LEFT</span><span class="hljs-operator">|</span><span class="hljs-keyword">RIGHT</span><span class="hljs-operator">|</span><span class="hljs-keyword">FULL</span> <span class="hljs-keyword">JOIN</span> 表B<br><span class="hljs-keyword">ON</span> 表A主键列 <span class="hljs-operator">=</span> 表B外键列;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> p.LastName, p.FirstName, o.OrderNo<br><span class="hljs-keyword">FROM</span> Persons p<br><span class="hljs-keyword">INNER</span> <span class="hljs-keyword">JOIN</span> Orders o<br><span class="hljs-keyword">ON</span> p.Id_P <span class="hljs-operator">=</span> o.Id_P<br><span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> p.LastName <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><h2 id="UNION-–-合并结果集"><a href="#UNION-–-合并结果集" class="headerlink" title="UNION – 合并结果集"></a>UNION – 合并结果集</h2><p>UNION 用于将两个或多个 SELECT 语句的结果合并成一个结果集。UNION 会自动去除重复的记录。如果你想保留重复的记录，可以使用 UNION ALL。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table1<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> column_name(s) <span class="hljs-keyword">FROM</span> table2;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">UNION</span><br><span class="hljs-keyword">SELECT</span> name <span class="hljs-keyword">FROM</span> contractors;<br></code></pre></td></tr></table></figure><h2 id="NOT-NULL-–-非空"><a href="#NOT-NULL-–-非空" class="headerlink" title="NOT NULL – 非空"></a>NOT NULL – 非空</h2><p>NOT NULL 是一种约束，用于确保在插入数据时某个字段的值不能为空。它通常用于表定义时，确保必填字段不为空。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> table_name (<br>    column_name data_type <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span><br>);<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> employees (<br>    id <span class="hljs-type">INT</span> <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    name <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">100</span>) <span class="hljs-keyword">NOT</span> <span class="hljs-keyword">NULL</span>,<br>    department <span class="hljs-type">VARCHAR</span>(<span class="hljs-number">50</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="VIEW-–-视图"><a href="#VIEW-–-视图" class="headerlink" title="VIEW – 视图"></a>VIEW – 视图</h2><p>VIEW 是一个虚拟表，它基于查询结果创建，可以用来简化复杂查询或将频繁使用的查询封装起来。VIEW 不存储数据，而是将 SQL 查询的结果作为一个虚拟表呈现。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> view_name <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> column_name(s)<br><span class="hljs-keyword">FROM</span> table_name<br><span class="hljs-keyword">WHERE</span> 查询条件;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> view_name;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">VIEW</span> employee_view <span class="hljs-keyword">AS</span><br><span class="hljs-keyword">SELECT</span> id, name, department<br><span class="hljs-keyword">FROM</span> employees<br><span class="hljs-keyword">WHERE</span> department <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Sales&#x27;</span>;<br><br><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">VIEW</span> employee_view;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>SQL基础语法</title>
    <link href="/2024/03/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/"/>
    <url>/2024/03/05/SQL%E5%9F%BA%E7%A1%80%E8%AF%AD%E8%A8%80/</url>
    
    <content type="html"><![CDATA[<h1 id="引言"><a href="#引言" class="headerlink" title="引言"></a>引言</h1><p><strong>数据库</strong>，顾名思义就是存放数据的容器。最常见的数据库类型是<strong>关系型数据库管理系统</strong>（RDBMS）：RDBMS 是 SQL 的基础，同样也是所有现代数据库系统的基础，比如 MS SQL Server, IBM DB2, Oracle, MySQL 以及 Microsoft Access等等。RDBMS 中的数据存储在被称为<strong>表</strong>（tables）的数据库对象中。</p><p><strong>表</strong>是相关的数据项的集合，它由列和行组成。一个数据库通常包含一个或多个表，每个表由一个名字标识（例如“客户”或者“订单”）。表包含带有数据的记录(行)。</p><p><strong>SQL</strong> 是用于访问和处理数据库的标准的计算机语言，可与数据库程序协同工作，但是各种各样的数据库衍生了很多不同版本的 SQL 语言，为了与 ANSI 标准相兼容，它们必须以相似的方式共同地来支持一些主要的关键词（比如 SELECT、UPDATE、DELETE、INSERT、WHERE 等等），这些就是我们要学习的SQL基础。<br>SQL主要分为两个类型：</p><ul><li>数据查询语言（DQL: Data Query Language）</li><li>数据操纵语言（DML：Data Manipulation Language）</li></ul><h1 id="SQL基础语言"><a href="#SQL基础语言" class="headerlink" title="SQL基础语言"></a>SQL基础语言</h1><h2 id="CREATE-TABLE-—-创建表"><a href="#CREATE-TABLE-—-创建表" class="headerlink" title="CREATE TABLE — 创建表"></a>CREATE TABLE — 创建表</h2><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> 表名称<br>(<br>列名称<span class="hljs-number">1</span> 数据类型,<br>列名称<span class="hljs-number">2</span> 数据类型,<br>列名称<span class="hljs-number">3</span> 数据类型,<br>....<br>);<br></code></pre></td></tr></table></figure><p>数据类型（data_type）规定了列可容纳何种数据类型。下面的表格包含了SQL中最常用的数据类型：</p><table><thead><tr><th>数据类型</th><th>描述</th></tr></thead><tbody><tr><td>integer(size),int(size),smallint(size),tinyint(size)</td><td>仅容纳整数、在括号内规定数字的最大位数</td></tr><tr><td>decimal(size,d),numeric(size,d)</td><td>容纳带有小数的数字、“size” 规定数字的最大位数、“d” 规定小数点右侧的最大位数</td></tr><tr><td>char(size)</td><td>容纳固定长度的字符串（可容纳字母、数字以及特殊字符）、在括号中规定字符串的长度</td></tr><tr><td>varchar(size)</td><td>容纳可变长度的字符串（可容纳字母、数字以及特殊的字符）、在括号中规定字符串的最大长度</td></tr><tr><td>date(yyyymmdd)</td><td>容纳日期</td></tr></tbody></table><p style="color:blue">实例：</p><p>本例演示了创建名为 “Persons” 的表，该表包含 5 个列，列名分别是：“Id_P”、“LastName”、“FirstName”、“Address” 以及 “City”：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">CREATE</span> <span class="hljs-keyword">TABLE</span> Persons<br>(<br>Id_P <span class="hljs-type">int</span>,<br>LastName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>FirstName <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>Address <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>),<br>City <span class="hljs-type">varchar</span>(<span class="hljs-number">255</span>)<br>);<br></code></pre></td></tr></table></figure><h2 id="INSERT-–-向表中插入数据"><a href="#INSERT-–-向表中插入数据" class="headerlink" title="INSERT – 向表中插入数据"></a>INSERT – 向表中插入数据</h2><p style="color:blue">语法：</p><p>向表格中插入新的行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称 <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>,....);<br></code></pre></td></tr></table></figure><p>在指定列中插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> 表名称 (列<span class="hljs-number">1</span>, 列<span class="hljs-number">2</span>,...) <span class="hljs-keyword">VALUES</span> (值<span class="hljs-number">1</span>, 值<span class="hljs-number">2</span>,....);<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><p>插入新的行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Persons <span class="hljs-keyword">VALUES</span> (<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;Gates&#x27;</span>, <span class="hljs-string">&#x27;Bill&#x27;</span>, <span class="hljs-string">&#x27;Xuanwumen 10&#x27;</span>, <span class="hljs-string">&#x27;Beijing&#x27;</span>);<br></code></pre></td></tr></table></figure><p>在指定列中插入数据：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">INSERT</span> <span class="hljs-keyword">INTO</span> Persons (LastName, Address) <span class="hljs-keyword">VALUES</span> (<span class="hljs-string">&#x27;Wilson&#x27;</span>, <span class="hljs-string">&#x27;Champs-Elysees&#x27;</span>);<br></code></pre></td></tr></table></figure><h2 id="SELECT-–-查询数据"><a href="#SELECT-–-查询数据" class="headerlink" title="SELECT – 查询数据"></a>SELECT – 查询数据</h2><p style="color:blue">语法：</p><p>查询指定列：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span>,... <span class="hljs-keyword">FROM</span> 表名称;<br></code></pre></td></tr></table></figure><blockquote><p><code>SELECT *</code>代表查询所有列，下同。</p></blockquote><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons;<br><span class="hljs-keyword">SELECT</span> LastName,FirstName <span class="hljs-keyword">FROM</span> Persons;<br></code></pre></td></tr></table></figure><h2 id="DISTINCT-–-去除重复值"><a href="#DISTINCT-–-去除重复值" class="headerlink" title="DISTINCT – 去除重复值"></a>DISTINCT – 去除重复值</h2><p style="color:blue">语法：</p><p>使查询到的结果去除重复值：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-keyword">DISTINCT</span> LASTNAME <span class="hljs-keyword">FROM</span> Persons;<br></code></pre></td></tr></table></figure><h2 id="WHERE-–-条件过滤"><a href="#WHERE-–-条件过滤" class="headerlink" title="WHERE – 条件过滤"></a>WHERE – 条件过滤</h2><p>如果需要从表中选取指定的数据，可将 WHERE 子句添加到 SELECT 语句。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> 列名称 <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列 运算符 值;<br></code></pre></td></tr></table></figure><p>WHERE子句中可使用如下运算符：</p><table><thead><tr><th>操作符</th><th>描述</th></tr></thead><tbody><tr><td>&#x3D;</td><td>等于</td></tr><tr><td>&lt;&gt;</td><td>不等于</td></tr><tr><td>&gt;</td><td>大于</td></tr><tr><td>&lt;</td><td>小于</td></tr><tr><td>&gt;&#x3D;</td><td>大于等于</td></tr><tr><td>&lt;&#x3D;</td><td>小于等于</td></tr><tr><td>BETWEEN</td><td>在某个范围内</td></tr><tr><td>LIKE</td><td>搜索某种模式</td></tr></tbody></table><p style="color:blue">实例：</p><p>如果只希望选取居住在城市 “Beijing” 中的人，可以向 SELECT 语句添加 WHERE 子句：</p><figure class="highlight n1ql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs n1ql"><span class="hljs-keyword">SELECT</span> * <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> City=<span class="hljs-string">&#x27;Beijing&#x27;</span>;<br></code></pre></td></tr></table></figure><blockquote><p>注意：SQL 使用单引号来环绕文本值（大部分数据库系统也接受双引号）。如果是数值，请不要使用引号。</p></blockquote><h2 id="AND-OR-–-运算符"><a href="#AND-OR-–-运算符" class="headerlink" title="AND &amp; OR – 运算符"></a>AND &amp; OR – 运算符</h2><p>AND 和 OR 可在 WHERE 子语句中把两个或多个条件结合起来。</p><ul><li>如果第一个条件和第二个条件都成立，则 AND 运算符显示一条记录。</li><li>如果第一个条件和第二个条件中只要有一个成立，则 OR 运算符显示一条记录。</li></ul><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列 运算符 值 <span class="hljs-keyword">AND</span> 列 运算符 值;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列 运算符 值 <span class="hljs-keyword">OR</span> 列 运算符 值;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> FirstName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">AND</span> LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Carter&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> firstname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">OR</span> lastname<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Carter&#x27;</span>;<br><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> (FirstName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Thomas&#x27;</span> <span class="hljs-keyword">OR</span> FirstName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;William&#x27;</span>) <span class="hljs-keyword">AND</span> LastName<span class="hljs-operator">=</span><span class="hljs-string">&#x27;Carter&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="ORDER-BY-–-排序"><a href="#ORDER-BY-–-排序" class="headerlink" title="ORDER BY – 排序"></a>ORDER BY – 排序</h2><p>ORDER BY 语句用于根据指定的一个或多个列对结果集进行排序，默认按照升序对记录进行排序，如果希望按照降序对记录进行排序，可以使用 DESC 关键字。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> 列<span class="hljs-number">1</span>,列<span class="hljs-number">2</span> <span class="hljs-keyword">DESC</span>;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">SELECT</span> <span class="hljs-operator">*</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">ORDER</span> <span class="hljs-keyword">BY</span> LASTNAME;<br></code></pre></td></tr></table></figure><blockquote><p>空值（NULL）默认排序在有值行之后。</p></blockquote><h2 id="UPDATE-–-更新数据"><a href="#UPDATE-–-更新数据" class="headerlink" title="UPDATE – 更新数据"></a>UPDATE – 更新数据</h2><p>Update 语句用于修改表中的数据。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> 表名称 <span class="hljs-keyword">SET</span> 列名称 <span class="hljs-operator">=</span> 新值 <span class="hljs-keyword">WHERE</span> 列名称 <span class="hljs-operator">=</span> 某值;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">UPDATE</span> Persons <span class="hljs-keyword">SET</span> FirstName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Fred&#x27;</span> <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span>;<br><span class="hljs-keyword">UPDATE</span> Persons <span class="hljs-keyword">SET</span> ID_P <span class="hljs-operator">=</span> <span class="hljs-number">6</span>,city<span class="hljs-operator">=</span> <span class="hljs-string">&#x27;London&#x27;</span> <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span>;<br></code></pre></td></tr></table></figure><h2 id="DELETE-–-删除数据"><a href="#DELETE-–-删除数据" class="headerlink" title="DELETE – 删除数据"></a>DELETE – 删除数据</h2><p>DELETE 语句用于删除表中的行。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称 <span class="hljs-keyword">WHERE</span> 列名称 <span class="hljs-operator">=</span> 值;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><p>删除某行：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> Persons <span class="hljs-keyword">WHERE</span> LastName <span class="hljs-operator">=</span> <span class="hljs-string">&#x27;Wilson&#x27;</span>;<br></code></pre></td></tr></table></figure><p>删除所有行（表的结构、属性和索引仍然保留）：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DELETE</span> <span class="hljs-keyword">FROM</span> 表名称;<br></code></pre></td></tr></table></figure><h2 id="TRUNCATE-TABLE-–-清除表数据"><a href="#TRUNCATE-TABLE-–-清除表数据" class="headerlink" title="TRUNCATE TABLE – 清除表数据"></a>TRUNCATE TABLE – 清除表数据</h2><p>TRUNCATE TABLE 可以除去表内的数据，但不删除表本身。</p><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> 表名称;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">TRUNCATE</span> <span class="hljs-keyword">TABLE</span> persons;<br></code></pre></td></tr></table></figure><h2 id="DROP-TABLE-–-删除表"><a href="#DROP-TABLE-–-删除表" class="headerlink" title="DROP TABLE – 删除表"></a>DROP TABLE – 删除表</h2><p style="color:blue">语法：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> 表名称;<br></code></pre></td></tr></table></figure><p style="color:blue">实例：</p><figure class="highlight sql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs sql"><span class="hljs-keyword">DROP</span> <span class="hljs-keyword">TABLE</span> persons;<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
    <tags>
      
      <tag>SQL</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用kind搭建k8s集群</title>
    <link href="/2024/02/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/"/>
    <url>/2024/02/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/</url>
    
    <content type="html"><![CDATA[<h1 id="背景"><a href="#背景" class="headerlink" title="背景"></a>背景</h1><p><a href="https://kind.sigs.k8s.io/">kind</a>即<code>Kubernetes In Docker</code>,他能将 k8s 所有组件全部署在一个 docker 容器中，可以作为一个本地集群搭建的工具。</p><h1 id="下载"><a href="#下载" class="headerlink" title="下载"></a>下载</h1><p>Linux：</p><ul><li>AMD64&#x2F;x86_64<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ $(<span class="hljs-built_in">uname</span> -m) = x86_64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-amd64<br></code></pre></td></tr></table></figure></li><li>ARM64<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">[ $(<span class="hljs-built_in">uname</span> -m) = aarch64 ] &amp;&amp; curl -Lo ./kind https://kind.sigs.k8s.io/dl/v0.20.0/kind-linux-arm64<br></code></pre></td></tr></table></figure>下载好对应版本的二进制包后，为 kind 添加可执行权限并移动至系统 PATH 环境变量下：<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">chmod</span> +x ./kind<br><span class="hljs-built_in">mv</span> ./kind /usr/local/bin/kind<br></code></pre></td></tr></table></figure><blockquote><p>有关其他操作系统的安装，或使用其他安装方式，亦或是希望下载最新版本的 kind，可移步<a href="https://kind.sigs.k8s.io/">官方文档</a>。</p></blockquote></li></ul><h1 id="基本使用"><a href="#基本使用" class="headerlink" title="基本使用"></a>基本使用</h1><p>一个集群往往有很多节点，但本地开发环境的资源可能比较有限，故在此使用两个节点，既可以节约资源，又可以体验多节点的特性。</p><h2 id="1-创建集群配置文件"><a href="#1-创建集群配置文件" class="headerlink" title="1. 创建集群配置文件"></a>1. 创建集群配置文件</h2><figure class="highlight ldif"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs ldif">cat &lt;&lt; EOF &gt; kind-clusters-mutil-config.yaml<br><span class="hljs-attribute">kind</span>: Cluster<br><span class="hljs-attribute">apiVersion</span>: kind.x-k8s.io/v1alpha4<br><span class="hljs-attribute">nodes</span>:<br><span class="hljs-literal">-</span> role: control-plane<br><span class="hljs-literal">-</span> role: worker<br>EOF<br></code></pre></td></tr></table></figure><h2 id="2-根据配置文件创建集群"><a href="#2-根据配置文件创建集群" class="headerlink" title="2. 根据配置文件创建集群"></a>2. 根据配置文件创建集群</h2><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs fortran"><span class="hljs-keyword">kind</span> create cluster --<span class="hljs-keyword">name</span> k8s-<span class="hljs-keyword">local</span>-dev --config ./<span class="hljs-keyword">kind</span>-clusters-mutil-config.yaml<br></code></pre></td></tr></table></figure><p><img src="/2023/11/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/create-cluster.png" alt="创建集群"></p><figure class="highlight fortran"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs fortran"># 创建集群，--<span class="hljs-keyword">name</span>与--config均为可选参数。默认名称为<span class="hljs-keyword">kind</span><br><span class="hljs-keyword">kind</span> create cluster --<span class="hljs-keyword">name</span> &lt;<span class="hljs-keyword">name</span>&gt; --config &lt;path/to/<span class="hljs-keyword">file</span>&gt;<br># 查询集群<br><span class="hljs-keyword">kind</span> get clusters<br># 删除集群<br><span class="hljs-keyword">kind</span> delete cluster --<span class="hljs-keyword">name</span> &lt;<span class="hljs-keyword">name</span>&gt;<br></code></pre></td></tr></table></figure><h2 id="查看集群信息"><a href="#查看集群信息" class="headerlink" title="查看集群信息"></a>查看集群信息</h2><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl cluster-<span class="hljs-built_in">info</span><br>kubectl <span class="hljs-built_in">get</span> node<br><span class="hljs-comment"># 查看集群运行情况</span><br>kubectl <span class="hljs-built_in">get</span> po -n kube-system<br></code></pre></td></tr></table></figure><h1 id="实战"><a href="#实战" class="headerlink" title="实战"></a>实战</h1><p>之前的步骤相当于在本地起了一个容器，集群就运行在容器中，使用<code>docker ps</code>就可以看到启动的容器及容器暴露的端口。<br>删除之前的集群<code>kind delete cluster --name k8s-local-dev</code></p><h2 id="创建新配置文件及集群"><a href="#创建新配置文件及集群" class="headerlink" title="创建新配置文件及集群"></a>创建新配置文件及集群</h2><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt; EOF &gt; kind-clusters-mutil-config.yaml</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Cluster</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">kind.x-k8s.io/v1alpha4</span><br><span class="hljs-attribute">nodes</span><span class="hljs-punctuation">:</span><br><span class="hljs-bullet">-</span> <span class="hljs-string">role: control-plane</span><br>  <span class="hljs-attribute">kubeadmConfigPatches</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">|</span><br>    <span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">InitConfiguration</span><br>    <span class="hljs-attribute">nodeRegistration</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">kubeletExtraArgs</span><span class="hljs-punctuation">:</span><br>        <span class="hljs-attribute">node-labels</span><span class="hljs-punctuation">:</span> <span class="hljs-string">&quot;ingress-ready=true&quot;</span><br>  <span class="hljs-attribute">extraPortMappings</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 80</span><br>    <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">80</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 443</span><br>    <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">443</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">containerPort: 30000</span><br>    <span class="hljs-attribute">hostPort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30000</span><br>    <span class="hljs-attribute">protocol</span><span class="hljs-punctuation">:</span> <span class="hljs-string">TCP</span><br>EOF<br>kind create cluster --name k8s-local-dev --config ./kind-clusters-mutil-config.yaml<br></code></pre></td></tr></table></figure><blockquote><p>extraPortMappings：把K8s容器（相当于K8s所在的服务器）端口暴露出来，这里暴露了80、443、30000；<br>node-labels：只允许Ingress controller运行在有”ingress-ready&#x3D;true”标签的node上；</p></blockquote><p>此时运行<code>docker ps</code>可以看到80、443、30000端口已经暴露出来了<br><img src="/2023/11/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/%E6%9A%B4%E9%9C%B2%E7%AB%AF%E5%8F%A3.png" alt="暴露端口"></p><h2 id="部署Deployment"><a href="#部署Deployment" class="headerlink" title="部署Deployment"></a>部署Deployment</h2><ol><li>新建<code>my-dep.yaml</code><figure class="highlight yaml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br></pre></td><td class="code"><pre><code class="hljs yaml"><span class="hljs-string">cat</span> <span class="hljs-string">&lt;&lt;</span> <span class="hljs-string">EOF</span> <span class="hljs-string">&gt;</span> <span class="hljs-string">my-dep.yaml</span><br><span class="hljs-attr">apiVersion:</span> <span class="hljs-string">apps/v1</span><br><span class="hljs-attr">kind:</span> <span class="hljs-string">Deployment</span><br><span class="hljs-attr">metadata:</span><br>  <span class="hljs-attr">name:</span> <span class="hljs-string">httpd-dep</span><br><span class="hljs-attr">spec:</span><br>  <span class="hljs-attr">replicas:</span> <span class="hljs-number">1</span>  <span class="hljs-comment"># number of replicas of frontEnd application</span><br>  <span class="hljs-attr">selector:</span><br>    <span class="hljs-attr">matchLabels:</span><br>      <span class="hljs-attr">app:</span> <span class="hljs-string">httpd-app</span><br>  <span class="hljs-attr">template:</span><br>    <span class="hljs-attr">metadata:</span><br>      <span class="hljs-attr">labels:</span> <span class="hljs-comment"># Must match &#x27;Service&#x27; and &#x27;Deployment&#x27; labels</span><br>        <span class="hljs-attr">app:</span> <span class="hljs-string">httpd-app</span><br>    <span class="hljs-attr">spec:</span><br>      <span class="hljs-attr">containers:</span><br>      <span class="hljs-bullet">-</span> <span class="hljs-attr">name:</span> <span class="hljs-string">httpd</span><br>        <span class="hljs-attr">image:</span> <span class="hljs-string">httpd</span> <span class="hljs-comment"># docker image of frontend application</span><br>        <span class="hljs-attr">ports:</span><br>        <span class="hljs-bullet">-</span> <span class="hljs-attr">containerPort:</span> <span class="hljs-number">80</span><br><span class="hljs-string">EOF</span><br></code></pre></td></tr></table></figure><blockquote><p>Deployment的名称为<code>httpd-dep</code>；<br>管理的Pods需要带有<code>app: httpd-app</code>标签；<br>Pod模板中指定运行的镜像为Docker公共仓库中的httpd；</p></blockquote></li><li>创建Deployment<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl apply -f <span class="hljs-keyword">my</span>-dep.yaml<br></code></pre></td></tr></table></figure></li></ol><h2 id="部署Service"><a href="#部署Service" class="headerlink" title="部署Service"></a>部署Service</h2><ol><li>新建<code>my-svc.yaml</code><figure class="highlight nestedtext"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs nestedtext"><span class="hljs-attribute">cat &lt;&lt; EOF &gt; my-svc.yaml</span><br><span class="hljs-attribute">kind</span><span class="hljs-punctuation">:</span> <span class="hljs-string">Service</span><br><span class="hljs-attribute">apiVersion</span><span class="hljs-punctuation">:</span> <span class="hljs-string">v1</span><br><span class="hljs-attribute">metadata</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">name</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpd-svc</span><br><span class="hljs-attribute">spec</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-attribute">selector</span><span class="hljs-punctuation">:</span><br>      <span class="hljs-attribute">app</span><span class="hljs-punctuation">:</span> <span class="hljs-string">httpd-app</span><br>  <span class="hljs-attribute">type</span><span class="hljs-punctuation">:</span> <span class="hljs-string">NodePort</span><br>  <span class="hljs-attribute">ports</span><span class="hljs-punctuation">:</span><br>  <span class="hljs-bullet">-</span> <span class="hljs-string">port: 80</span><br>    <span class="hljs-attribute">nodePort</span><span class="hljs-punctuation">:</span> <span class="hljs-string">30000</span><br>EOF<br></code></pre></td></tr></table></figure></li><li>创建Service<figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">kubectl apply -f <span class="hljs-keyword">my</span>-svc.yaml<br></code></pre></td></tr></table></figure>查看Service信息<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">kubectl <span class="hljs-built_in">get</span> svc/httpd-svc<br></code></pre></td></tr></table></figure><img src="/2023/11/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/%E6%9F%A5%E7%9C%8Bservice%E4%BF%A1%E6%81%AF.png" alt="查看service信息"></li></ol><h2 id="访问服务"><a href="#访问服务" class="headerlink" title="访问服务"></a>访问服务</h2><p>配置文件中<code>nodePort</code>参数指定Serivce映射到k8s集群服务器上的端口为30000，而在创建kind k8s时又把容器的30000端口映射到了本地，所以现在可以在本地用浏览器访问30000的端口，<a href="http://localhost:30000/">http://localhost:30000/</a>。<br><img src="/2023/11/10/%E4%BD%BF%E7%94%A8kind%E6%90%AD%E5%BB%BAk8s%E9%9B%86%E7%BE%A4/%E8%AE%BF%E9%97%AE%E6%9C%8D%E5%8A%A1.png" alt="访问服务"></p>]]></content>
    
    
    
    <tags>
      
      <tag>kind</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>初识Flask</title>
    <link href="/2024/01/20/%E5%88%9D%E8%AF%86Flask/"/>
    <url>/2024/01/20/%E5%88%9D%E8%AF%86Flask/</url>
    
    <content type="html"><![CDATA[<h1 id="Flask简介"><a href="#Flask简介" class="headerlink" title="Flask简介"></a>Flask简介</h1><p>Flask是一个轻量级的Python Web框架，其设计简洁灵活，允许开发者根据需求扩展功能，同时也提供了开发web应用所需的基本组件。</p><h1 id="第一个Flask应用"><a href="#第一个Flask应用" class="headerlink" title="第一个Flask应用"></a>第一个Flask应用</h1><p>一个最简单的Flask应用结构如下，运行后可通过访问<a href="http://127.0.0.1:5000/">http://127.0.0.1:5000</a>查看刚刚启动的应用程序。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&#x27;/&#x27;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>():<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;hello flask&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="通过转换器定义路由中的参数"><a href="#通过转换器定义路由中的参数" class="headerlink" title="通过转换器定义路由中的参数"></a>通过转换器定义路由中的参数</h1><p>转换器可以用于定义URL路由中参数的格式和类型，在路由中添加参数的格式为<code>/&lt;转换器:参数名称&gt;</code>，同时需要在函数入参中添加对应参数。常用转换器有string（接受不包含斜杠的文本）、int、float和path（接受包含斜杠的文本）等。</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hello/&lt;string:name&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="自定义转换器"><a href="#自定义转换器" class="headerlink" title="自定义转换器"></a>自定义转换器</h1><p>自定义转换器可以在处理请求时进行自定义的参数转换。可以通过继承BaseConverter类自定义转换器，然后将它们注册到Flask应用中：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> datetime <span class="hljs-keyword">import</span> datetime<br><br><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask<br><span class="hljs-keyword">from</span> werkzeug.routing <span class="hljs-keyword">import</span> BaseConverter<br><br>app = Flask(__name__)<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">RegexConverter</span>(<span class="hljs-title class_ inherited__">BaseConverter</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;正则转换器&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url_map, regex</span>):<br>        <span class="hljs-built_in">super</span>().__init__(url_map)<br>        self.regex = regex<br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">DateConverter</span>(<span class="hljs-title class_ inherited__">BaseConverter</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;日期转换器&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">__init__</span>(<span class="hljs-params">self, url_map</span>):<br>        <span class="hljs-built_in">super</span>().__init__(url_map)<br>        <span class="hljs-comment"># 年-月-日，如2000-1-1</span><br>        self.<span class="hljs-built_in">format</span> = <span class="hljs-string">&quot;%Y-%m-%d&quot;</span><br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_python</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-comment"># 解析路由中的参数并将其转化为希望的Python类型。此处将字符串值转换为日期对象</span><br>        <span class="hljs-keyword">try</span>:<br>            <span class="hljs-keyword">return</span> datetime.strptime(value, self.<span class="hljs-built_in">format</span>)<br>        <span class="hljs-keyword">except</span> ValueError:<br>            <span class="hljs-keyword">raise</span> ValueError(<span class="hljs-string">f&quot;Invalid date format. Expected format: <span class="hljs-subst">&#123;self.<span class="hljs-built_in">format</span>&#125;</span>&quot;</span>)<br><br>    <span class="hljs-keyword">def</span> <span class="hljs-title function_">to_url</span>(<span class="hljs-params">self, value</span>):<br>        <span class="hljs-comment"># 将日期对象转换为字符串</span><br>        <span class="hljs-keyword">return</span> value.strftime(self.<span class="hljs-built_in">format</span>)<br><br><br><span class="hljs-comment"># 将自定义转换器添加到flask app中</span><br>app.url_map.converters[<span class="hljs-string">&quot;re&quot;</span>] = RegexConverter<br>app.url_map.converters[<span class="hljs-string">&quot;date&quot;</span>] = DateConverter<br><br><br><span class="hljs-comment"># 参数num的类型是re(&#x27;\d&#x27;)，即可以匹配一个或多个数字</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/converter/&lt;re(&#x27;\d+&#x27;):num&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">converter</span>(<span class="hljs-params">num</span>):<br>    <span class="hljs-keyword">return</span> num<br><br><br><span class="hljs-comment"># date转换器后没有跟“(参数)”，因为DateConverter类的__init__方法没有定义额外的参数（url_map为默认参数）</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/date/&lt;date:date_value&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">show_date</span>(<span class="hljs-params">date_value</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;Parsed date: <span class="hljs-subst">&#123;date_value&#125;</span>&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="模板的基本使用"><a href="#模板的基本使用" class="headerlink" title="模板的基本使用"></a>模板的基本使用</h1><p>Flask模板使用Jinja2引擎，通过<code>render_template()</code>渲染HTML文件。假设当前项目结构如下：</p><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">/my_project<br>    /templates  <span class="hljs-comment"># 用于存放HTML模板文件</span><br>        index.html<br>    app.py<br></code></pre></td></tr></table></figure><p>index.html文件内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>template<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>模板的基本使用<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data: &#123;&#123; data &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data[&quot;name&quot;]: &#123;&#123; data[&quot;name&quot;] &#125;&#125;  # 类似字典的用法<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data.name: &#123;&#123; data.name &#125;&#125;  # 类似属性的用法<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data.mylist: &#123;&#123; data.mylist &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data.mylist[0]: &#123;&#123; data.mylist[0] &#125;&#125;  # 使用列表索引<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>data.mylist[1] + data.mylist[2]: &#123;&#123; data.mylist[1] + data.mylist[2] &#125;&#125;  # 计算<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行flask应用使用此模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/template&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">template</span>():<br>    data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;name&quot;</span>, <span class="hljs-string">&quot;age&quot;</span>: <span class="hljs-number">18</span>, <span class="hljs-string">&quot;mylist&quot;</span>: [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]&#125;<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;index.html&quot;</span>, data=data)  <span class="hljs-comment"># 自动从当前的templates目录下寻找对应模板，data为模板中可以使用的变量</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="过滤器与自定义过滤器"><a href="#过滤器与自定义过滤器" class="headerlink" title="过滤器与自定义过滤器"></a>过滤器与自定义过滤器</h1><p>过滤器是在模板中用于处理和格式化变量的一种工具。它们通过管道符号（|）来应用，可以对模板中的数据进行转换或修改，从而使得输出更加符合需求。Flask有众多内置过滤器，如：lower、upper、date等，也可以自定义过滤器。</p><p>filter.html内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>filter<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>过滤器：<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>&quot;abc&quot; | upper: &#123;&#123; &quot;abc&quot; | upper &#125;&#125;<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>mylist | sum: &#123;&#123; mylist | sum&#125;&#125;  # 使用自定义sum过滤器<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>使用filter.html模板：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/filter&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">use_filter</span>():<br>    mylist = [<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>]<br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;filter.html&quot;</span>, mylist=mylist)<br><br><br><span class="hljs-comment"># 自定义过滤器</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">get_sum</span>(<span class="hljs-params">li</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;自定义过滤器&quot;&quot;&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-built_in">sum</span>(li)<br><br><br><span class="hljs-comment"># 注册过滤器。第一个参数为函数名，第二个参数为在模板中使用此过滤器的名字</span><br>app.add_template_filter(get_sum, <span class="hljs-string">&quot;sum&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="表单与自定义表单"><a href="#表单与自定义表单" class="headerlink" title="表单与自定义表单"></a>表单与自定义表单</h1><p>表单是用来处理用户输入数据的一种机制，可以使用html自带的表单格式，也可以利用flask_wtf实现自定义表单。</p><p>form.html内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>form Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        账号<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;text&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;name&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        密码<br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;password&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;password&quot;</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        <span class="hljs-tag">&lt;<span class="hljs-name">input</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;submit&quot;</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;submit&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>register.html内容如下：</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>register Title<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">form</span> <span class="hljs-attr">action</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">method</span>=<span class="hljs-string">&quot;post&quot;</span>&gt;</span><br>        注册新用户<span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123; form.username.label&#125;&#125;<br>        &#123;&#123; form.username&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123; form.password.label&#125;&#125;<br>        &#123;&#123; form.password&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123; form.password2.label&#125;&#125;<br>        &#123;&#123; form.password2&#125;&#125;<br>        <span class="hljs-tag">&lt;<span class="hljs-name">br</span>&gt;</span><br>        &#123;&#123; form.submit &#125;&#125;<br>    <span class="hljs-tag">&lt;/<span class="hljs-name">form</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><p>运行应用程序：</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request<br><span class="hljs-keyword">from</span> wtforms <span class="hljs-keyword">import</span> StringField, PasswordField, SubmitField<br><span class="hljs-keyword">from</span> flask_wtf <span class="hljs-keyword">import</span> FlaskForm<br><span class="hljs-keyword">from</span> wtforms.validators <span class="hljs-keyword">import</span> DataRequired, EqualTo<br><br>app = Flask(__name__)<br><br><br><span class="hljs-comment"># 路由默认只接受GET请求，可通过methods参数定义接受的请求</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/form&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">form</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;form.html&quot;</span>)<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.form.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;name: <span class="hljs-subst">&#123;name&#125;</span>, password: <span class="hljs-subst">&#123;password&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;other request method&quot;</span><br><br><br><span class="hljs-keyword">class</span> <span class="hljs-title class_">Register</span>(<span class="hljs-title class_ inherited__">FlaskForm</span>):<br>    <span class="hljs-string">&quot;&quot;&quot;自定义表单&quot;&quot;&quot;</span><br>    username = StringField(label=<span class="hljs-string">&quot;用户名&quot;</span>, validators=[DataRequired(<span class="hljs-string">&quot;用户名不能为空&quot;</span>)])<br>    password = PasswordField(label=<span class="hljs-string">&quot;请输入密码&quot;</span>, validators=[DataRequired(<span class="hljs-string">&quot;密码不能为空&quot;</span>)])<br>    password2 = PasswordField(label=<span class="hljs-string">&quot;重复输入密码&quot;</span>, validators=[DataRequired(<span class="hljs-string">&quot;密码不能为空&quot;</span>), EqualTo(<span class="hljs-string">&quot;password&quot;</span>)])<br>    submit = SubmitField(label=<span class="hljs-string">&quot;提交&quot;</span>)<br><br><br>app.config[<span class="hljs-string">&quot;SECRET_KEY&quot;</span>] = <span class="hljs-string">&quot;abcde&quot;</span>  <span class="hljs-comment"># 设置CSRF_TOKEN，随机字符串</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/register&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">register</span>():<br>    form = Register()<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;register.html&quot;</span>, form=form)  <span class="hljs-comment"># 使用自定义表单</span><br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        <span class="hljs-comment"># 两种方式等价</span><br>        <span class="hljs-comment"># username = request.form.get(&quot;username&quot;)</span><br>        <span class="hljs-comment"># password = request.form.get(&quot;password&quot;)</span><br>        <span class="hljs-comment"># password2 = request.form.get(&quot;password2&quot;)</span><br>        username = form.username.data<br>        password = form.password.data<br>        password2 = form.password2.data<br>        <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;username: <span class="hljs-subst">&#123;username&#125;</span>, password: <span class="hljs-subst">&#123;password&#125;</span>, password2: <span class="hljs-subst">&#123;password2&#125;</span>&quot;</span><br>    <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;other request method&quot;</span><br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="重定向"><a href="#重定向" class="headerlink" title="重定向"></a>重定向</h1><p>Flask通过<code>redirect()</code>方法实现重定向，</p><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, redirect, url_for<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/hello/&lt;string:name&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-keyword">return</span> <span class="hljs-string">f&quot;hello <span class="hljs-subst">&#123;name&#125;</span>&quot;</span><br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/redirect&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">request_redirect</span>():<br>    <span class="hljs-keyword">return</span> redirect(<span class="hljs-string">&quot;https://www.baidu.com&quot;</span>)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/url_for/&lt;string:name&gt;&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">url_for_hello</span>(<span class="hljs-params">name</span>):<br>    <span class="hljs-comment"># url_for可以解析函数的路由</span><br>    <span class="hljs-keyword">return</span> redirect(url_for(<span class="hljs-string">&quot;hello&quot;</span>, name=name))<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="返回json数据给前端"><a href="#返回json数据给前端" class="headerlink" title="返回json数据给前端"></a>返回json数据给前端</h1><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, make_response, json, jsonify<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/json&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_json</span>():<br>    data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;名字&quot;</span>&#125;<br>    response = make_response(json.dumps(data, ensure_ascii=<span class="hljs-literal">False</span>))<br>    response.mimetype = <span class="hljs-string">&quot;application/json&quot;</span><br>    <span class="hljs-keyword">return</span> response<br><br><br><span class="hljs-comment"># 使用jsonify需设置不使用ascii</span><br>app.config[<span class="hljs-string">&quot;JSON_AS_ASCII&quot;</span>] = <span class="hljs-literal">False</span><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/jsonify&quot;</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">return_json_by_jsonify</span>():<br>    data = &#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;名字&quot;</span>&#125;<br>    <span class="hljs-keyword">return</span> jsonify(data)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure><h1 id="使用abort返回异常给前端"><a href="#使用abort返回异常给前端" class="headerlink" title="使用abort返回异常给前端"></a>使用abort返回异常给前端</h1><p><code>abort()</code>方法可以主动抛出异常并结束请求，可以使用<code>errorhandler</code>装饰器进行异常的捕获与自定义。</p><p>404.html内容如下，其中..&#x2F;static&#x2F;err_404.png为照片</p><figure class="highlight html"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>404<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">img</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;../static/err_404.png&quot;</span> <span class="hljs-attr">alt</span>=<span class="hljs-string">&quot;&quot;</span> <span class="hljs-attr">width</span>=<span class="hljs-string">&quot;873px&quot;</span> <span class="hljs-attr">height</span>=<span class="hljs-string">&quot;626px&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">from</span> flask <span class="hljs-keyword">import</span> Flask, render_template, request, abort<br><br>app = Flask(__name__)<br><br><br><span class="hljs-meta">@app.route(<span class="hljs-params"><span class="hljs-string">&quot;/abort&quot;</span>, methods=[<span class="hljs-string">&quot;GET&quot;</span>, <span class="hljs-string">&quot;POST&quot;</span>]</span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">abort_error</span>():<br>    <span class="hljs-keyword">if</span> request.method == <span class="hljs-string">&quot;GET&quot;</span>:<br>        <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;form.html&quot;</span>)<br>    <span class="hljs-keyword">elif</span> request.method == <span class="hljs-string">&quot;POST&quot;</span>:<br>        name = request.form.get(<span class="hljs-string">&quot;name&quot;</span>)<br>        password = request.form.get(<span class="hljs-string">&quot;password&quot;</span>)<br>        <span class="hljs-keyword">if</span> name == <span class="hljs-string">&quot;537&quot;</span> <span class="hljs-keyword">and</span> password == <span class="hljs-string">&quot;537&quot;</span>:<br>            <span class="hljs-keyword">return</span> <span class="hljs-string">&quot;login success&quot;</span><br>        <span class="hljs-keyword">else</span>:<br>            abort(<span class="hljs-number">404</span>)<br><br><br><span class="hljs-comment"># 出现对应错误码时，自动捕获</span><br><span class="hljs-meta">@app.errorhandler(<span class="hljs-params"><span class="hljs-number">404</span></span>)</span><br><span class="hljs-keyword">def</span> <span class="hljs-title function_">handle_404_error</span>(<span class="hljs-params">err</span>):<br>    <span class="hljs-comment"># return f&quot;出现404错误 &#123;err&#125;&quot;</span><br>    <span class="hljs-keyword">return</span> render_template(<span class="hljs-string">&quot;404.html&quot;</span>)<br><br><br><span class="hljs-keyword">if</span> __name__ == <span class="hljs-string">&#x27;__main__&#x27;</span>:<br>    app.run()<br></code></pre></td></tr></table></figure>]]></content>
    
    
    
  </entry>
  
  
  
  <entry>
    <title>HTTP简介</title>
    <link href="/2023/12/25/HTTP%E7%AE%80%E4%BB%8B/"/>
    <url>/2023/12/25/HTTP%E7%AE%80%E4%BB%8B/</url>
    
    <content type="html"><![CDATA[<h1 id="HTTP-是什么"><a href="#HTTP-是什么" class="headerlink" title="HTTP 是什么"></a>HTTP 是什么</h1><p>HTTP（HyperText Transfer Protocol），即超文本传输协议，用于客户端和服务器之间的通信。</p><blockquote><p>超文本：一种通过超链接将文本、图像、视频、音频等资源进行关联的文本形式，广泛应用于万维网等领域，为用户提供了非线性的信息浏览和导航方式。</p></blockquote><h1 id="常用请求方法"><a href="#常用请求方法" class="headerlink" title="常用请求方法"></a>常用请求方法</h1><ul><li>GET：请求获取指定资源，不应该进行修改</li><li>POST：向服务器提交数据，常用于创建新资源</li><li>PUT：向服务器发送数据，用于更新现有资源</li><li>DELETE：删除服务器上的资源<blockquote><p>幂等：一个 HTTP 方法是幂等的，指的是同样的请求被执行一次与连续执行多次的效果是一样的，服务器的状态也是一样的，即幂等的方法不应该具有副作用。其中<code>GET，PUT，DELETE，HEAD</code>是幂等的，<code>POST</code>不是幂等的</p></blockquote></li></ul><h1 id="HTTP-请求结构"><a href="#HTTP-请求结构" class="headerlink" title="HTTP 请求结构"></a>HTTP 请求结构</h1><h2 id="请求行（Request-Line）"><a href="#请求行（Request-Line）" class="headerlink" title="请求行（Request Line）"></a>请求行（Request Line）</h2><p>请求行包含了请求的方法（GET、POST、PUT等）、请求的目标URL和HTTP协议版本</p><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># &lt;方法&gt;&lt;URL&gt;&lt;协议版本&gt;</span><br><span class="hljs-built_in">GET</span> /api<span class="hljs-built_in">/users </span>HTTP/1.1<br></code></pre></td></tr></table></figure><h2 id="请求头（Headers）"><a href="#请求头（Headers）" class="headerlink" title="请求头（Headers）"></a>请求头（Headers）</h2><p>请求头部包含了一系列的键值对，用于传递关于请求的附加信息，如用户代理信息、请求的内容类型、授权信息等。每个键值对都以键和值之间的<strong>冒号+空格</strong>分隔，并且每个键值对占据一行。常见字段：</p><ul><li><p>Host<br>HOST 的值表示服务器主机的地址和端口（地址可以是域名，也可以是 IP；端口号可以省略或者手动指定）</p></li><li><p>Content-Length<br>Content-Length 表示 body 的数据长度，长度单位是字节</p></li><li><p>Content-Type<br>Content-Type 表示 body 的数据格式</p></li><li><p>User-Agent：指定发送请求的用户代理（客户端）的相关信息，如浏览器类型、操作系统等</p></li><li><p>Authorization：用于进行身份验证，包含认证凭证或令牌</p></li><li><p>Cookie：包含之前从服务器收到的Cookie信息，用于会话管理</p></li><li><p>Referer：指定当前请求的来源URL，常用于防盗链、统计分析等</p><figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-attribute">Host</span><span class="hljs-punctuation">: </span>example.com<br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><span class="hljs-attribute">Authorization</span><span class="hljs-punctuation">: </span>Bearer &lt;token&gt;<br></code></pre></td></tr></table></figure></li></ul><h2 id="请求主体"><a href="#请求主体" class="headerlink" title="请求主体"></a>请求主体</h2><p>请求主体是可选的，用于在POST、PUT等请求方法中传递请求的数据内容。例如，当使用POST方法提交表单数据时，请求主体会包含表单字段的数据。请求主体的格式和内容类型由Content-Type请求头字段指示，内容类型有多重，以下是三种示例：</p><ul><li>JSON格式的请求主体<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/users</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/json<br><br><span class="language-perl">&#123;<span class="hljs-string">&quot;name&quot;</span>: <span class="hljs-string">&quot;John Doe&quot;</span>, <span class="hljs-string">&quot;email&quot;</span>: <span class="hljs-string">&quot;john@example.com&quot;</span>&#125;</span><br></code></pre></td></tr></table></figure></li><li>XML格式的请求主体<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/data</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/xml<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">user</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">name</span>&gt;</span>John Doe<span class="hljs-tag">&lt;/<span class="hljs-name">name</span>&gt;</span></span><br><span class="language-xml">  <span class="hljs-tag">&lt;<span class="hljs-name">email</span>&gt;</span>john@example.com<span class="hljs-tag">&lt;/<span class="hljs-name">email</span>&gt;</span></span><br><span class="language-xml"><span class="hljs-tag">&lt;/<span class="hljs-name">user</span>&gt;</span></span><br></code></pre></td></tr></table></figure></li><li>表单数据格式的请求主体<figure class="highlight http"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs http"><span class="hljs-keyword">POST</span> <span class="hljs-string">/api/submit</span> <span class="hljs-meta">HTTP/1.1</span><br><span class="hljs-attribute">Content-Type</span><span class="hljs-punctuation">: </span>application/x-www-form-urlencoded<br><br><span class="language-ini"><span class="hljs-attr">username</span>=johndoe&amp;age=<span class="hljs-number">25</span></span><br></code></pre></td></tr></table></figure></li></ul><h1 id="常见状态码"><a href="#常见状态码" class="headerlink" title="常见状态码"></a>常见状态码</h1><p>状态码表示访问一个页面的结果（如访问成功、失败或其它一些情况）</p><ul><li>1xx<br>提示信息，表示目前是协议处理的中间状态，还需要后续操作</li><li>2xx<br>成功，报文已经收到并被正确处理。如：200、204、206</li><li>3xx<br>重定向，资源位置发生变动，需要客户端重新发送请求。如：301、302、304</li><li>4xx<br>客户端错误，请求报文有误，服务器无法处理。如：400、403、404</li><li>5xx<br>服务器错误，服务器在处理请求时内部发生了错误。如：500、501、502、503</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>HTTP</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Dockerfile 详解</title>
    <link href="/2023/11/10/Dockerfile-%E8%AF%A6%E8%A7%A3/"/>
    <url>/2023/11/10/Dockerfile-%E8%AF%A6%E8%A7%A3/</url>
    
    <content type="html"><![CDATA[<h1 id="Dockerfile-介绍"><a href="#Dockerfile-介绍" class="headerlink" title="Dockerfile 介绍"></a>Dockerfile 介绍</h1><p>Dockerfile 是用来构建 Docker 镜像的文本文件，包含一系列用于定义不同的指令和操作的保留字（Reserved Keywords）。<br>本文主要包含两部分内容：</p><ul><li>Dockerfile 编写</li><li>使用 Dockerfile 构建镜像</li></ul><h1 id="Dockerfile-编写"><a href="#Dockerfile-编写" class="headerlink" title="Dockerfile 编写"></a>Dockerfile 编写</h1><ul><li>每条保留字指令都必须为大写字母，后面跟随至少一个参数</li><li><code>#</code>表示注释</li><li>指令从上到下顺序执行</li><li><strong>每条指令都会在临时容器中独立执行，创建一个新的镜像层并提交</strong></li></ul><h2 id="Dockerfile-保留字"><a href="#Dockerfile-保留字" class="headerlink" title="Dockerfile 保留字"></a>Dockerfile 保留字</h2><ul><li>FROM<br>指定当前镜像的基础镜像，以此为基础开始创建新镜像。第一个保留字必须是<code>FROM</code>。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># FROM 镜像名</span><br><span class="hljs-attribute">FROM</span> openeuler/openeuler:<span class="hljs-number">22</span>.<span class="hljs-number">03</span> AS base<br></code></pre></td></tr></table></figure></li><li>LABEL<br>可选，为镜像添加元数据标签，用于提供关于镜像的描述、版本信息、维护者等其他信息。<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs stata"><span class="hljs-keyword">LABEL</span> maintainer=<span class="hljs-string">&quot;John Doe &lt;johndoe@example.com&gt;&quot;</span><br><span class="hljs-keyword">LABEL</span> <span class="hljs-keyword">version</span>=<span class="hljs-string">&quot;1.0&quot;</span><br><span class="hljs-keyword">LABEL</span> description=<span class="hljs-string">&quot;This is a sample Docker image.&quot;</span><br></code></pre></td></tr></table></figure></li><li>RUN<br>在容器内部执行命令<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-comment"># RUN &lt;命令行命令&gt;</span><br><span class="hljs-built_in">RUN</span> dnf <span class="hljs-built_in">..</span>.<br><span class="hljs-built_in">RUN</span> curl <span class="hljs-built_in">..</span>.<br><span class="hljs-built_in">RUN</span> git clone <span class="hljs-built_in">..</span>.<br><span class="hljs-built_in">..</span>.<br></code></pre></td></tr></table></figure><blockquote><p>不能使用<code>RUN su &lt;username&gt;</code>来切换用户，前面提到过每条指令都在临时容器中独立执行，而<code>su</code>命令只对本次运行生效，不会影响后续的命令及最终的镜像。<br>可以在某些命令加<code>-u</code>参数指定执行用户，或使用<code>USER</code>保留字来指定后续命令的执行用户。</p></blockquote></li><li>USER<br>指定启动容器的默认用户，默认是 root。<figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh"><span class="hljs-keyword">USER</span> <span class="hljs-title">&lt;username</span>&gt;<br></code></pre></td></tr></table></figure></li><li>EXPOSE<br>声明当前容器对外暴露的端口，不会实际打开或映射端口。<figure class="highlight apache"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs apache"><span class="hljs-comment"># EXPOSE &lt;port&gt;</span><br><span class="hljs-attribute">EXPOSE</span> <span class="hljs-number">80</span><br></code></pre></td></tr></table></figure></li><li>ENV<br>设置环境变量<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">ENV <span class="hljs-attribute">ENV_VARIABLE1</span>=value1 <br></code></pre></td></tr></table></figure></li><li>WORKDIR<br>指定创建容器后，终端默认登录进来的工作目录<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-keyword">ENV</span> CATALINA_HOME=/usr/local/tomcat<br><span class="hljs-keyword">WORKDIR</span><span class="language-bash"> <span class="hljs-variable">$CATALINA_HOME</span></span><br></code></pre></td></tr></table></figure></li><li>VOLUME<br>指定容器数据卷，用户数据共享、保存和持久化工作。类似于<code>docker run</code>的<code>-v</code>参数<figure class="highlight shell"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs shell"><span class="hljs-meta prompt_"># </span><span class="language-bash">运行容器时可以使用 docker run -v /host/data:/data image_name，</span><br><span class="hljs-meta prompt_"># </span><span class="language-bash">挂载主机的 /host/data 目录到 /data 卷</span><br>VOLUME /data<br></code></pre></td></tr></table></figure></li><li>ADD<br>将宿主机的文件或目录拷贝进镜像，会自动处理 URL 和解压 tar 压缩包<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs xml"># <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span>是要复制的文件路径或 URL，<span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span>是容器内路径（路径不存在会自动创建）<br>ADD <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>COPY<br>类似 ADD，拷贝文件和目录到镜像中<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">COPY <span class="hljs-tag">&lt;<span class="hljs-name">source</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">destination</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li>ENTRYPOINT<br>指定容器启动后要执行的命令，有两种格式：<ol><li>shell 格式<figure class="highlight dockerfile"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs dockerfile"><span class="hljs-comment"># ENTRYPOINT&lt;command&gt;</span><br><span class="hljs-keyword">ENTRYPOINT</span><span class="language-bash"> <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;hello world&quot;</span></span><br></code></pre></td></tr></table></figure></li><li>exec 格式<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs css"># ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;可执行文件或命令&quot;</span>, <span class="hljs-string">&quot;参数1&quot;</span>, <span class="hljs-string">&quot;参数2&quot;</span>...]</span><br>ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;hello world&quot;</span>]</span><br></code></pre></td></tr></table></figure>运行容器时会自动输出<code>hello world</code>。<blockquote><p>同一个 Dockerfile 中只有最后一个 ENTRYPOINT 指令生效<br>通过 docker run 运行容器时指定的参数会被追加到 ENTRYPOINT 指令中的参数之后，不会覆盖<br>使用<code>--entrypoint &lt;string&gt;</code>参数可以覆盖 ENTRYPOINT 指令<br>ENTRYPOINT 通常与 CMD 结合使用<br>作用：确保容器始终执行特定操作</p></blockquote></li></ol></li><li>CMD<br>指定容器启动后要执行的命令。有三种格式：前两种格式与 ENTRYPOINT 的使用方法一样，只是替换了保留字。第三种格式是给  ENTRYPOINT 传递可被覆盖的参数<figure class="highlight css"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs css"># ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;executable&quot;</span>, <span class="hljs-string">&quot;param1&quot;</span>, <span class="hljs-string">&quot;param2&quot;</span>]</span><br># CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;param3&quot;</span>,<span class="hljs-string">&quot;param4&quot;</span>]</span><br>ENTRYPOINT <span class="hljs-selector-attr">[<span class="hljs-string">&quot;echo&quot;</span>, <span class="hljs-string">&quot;hello&quot;</span>]</span><br>CMD <span class="hljs-selector-attr">[<span class="hljs-string">&quot;docker&quot;</span>]</span><br></code></pre></td></tr></table></figure>直接运行容器会输出<code>hello docker</code>，但 CMD 中的参数可以被覆盖，如使用<code>docker run image_name world</code>运行容器，则会输出<code>hello world</code>。<blockquote><p>同一个 Dockerfile 中只有最后一个 CMD 指令生效<br>通过 docker run 运行容器时指定了命令或参数，会覆盖 CMD 中的命令或参数<br>作用：定义容器启动时的默认参数或默认命令，允许覆盖</p></blockquote></li></ul><h1 id="使用-Dockerfile-构建镜像"><a href="#使用-Dockerfile-构建镜像" class="headerlink" title="使用 Dockerfile 构建镜像"></a>使用 Dockerfile 构建镜像</h1><ol><li>准备<strong>名称为</strong><code>Dockerfile</code>的文件</li><li>在<code>Dockerfile</code>所在目录下，使用<code>docker build</code>构建镜像<figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">docker build -t <span class="hljs-tag">&lt;<span class="hljs-name">镜像名称</span>&gt;</span> .<br></code></pre></td></tr></table></figure><blockquote><p>若加标签可在名称后加<code>:&lt;tag&gt;</code><br>指定<code>Dockerfile</code>的路径：添加参数<code>-f path/to/Dockerfile</code><br>最后的<code>.</code>代表构建上下文，即在构建过程中 Docker 引擎所使用的文件和目录的根路径</p></blockquote></li></ol>]]></content>
    
    
    
    <tags>
      
      <tag>Docker</tag>
      
      <tag>Dockerfile</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>使用docker compose up启动本地环境</title>
    <link href="/2023/11/05/%E4%BD%BF%E7%94%A8docker-compose-up%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83/"/>
    <url>/2023/11/05/%E4%BD%BF%E7%94%A8docker-compose-up%E5%90%AF%E5%8A%A8%E6%9C%AC%E5%9C%B0%E7%8E%AF%E5%A2%83/</url>
    
    <content type="html"><![CDATA[<p>本篇文章仅针对 Ubuntu 上的 Docker Engine 的安装与 docker compose 的使用，若您有其他需求可以移步 Docker 官网<a href="https://docs.docker.com/">https://docs.docker.com/</a>。</p><hr><h1 id="在Ubuntu上安装-Docker-Engine"><a href="#在Ubuntu上安装-Docker-Engine" class="headerlink" title="在Ubuntu上安装 Docker Engine"></a>在Ubuntu上安装 Docker Engine</h1><h2 id="配置-apt-仓库"><a href="#配置-apt-仓库" class="headerlink" title="配置 apt 仓库"></a>配置 apt 仓库</h2><ol><li>更新<code>apt</code><figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> update<br>sudo apt-<span class="hljs-built_in">get</span> install ca-certificates curl gnupg<br></code></pre></td></tr></table></figure></li><li>添加 Docker 官方密钥<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs awk">sudo install -m <span class="hljs-number">0755</span> -d <span class="hljs-regexp">/etc/</span>apt/keyrings<br>curl -fsSL https:<span class="hljs-regexp">//</span>download.docker.com<span class="hljs-regexp">/linux/u</span>buntu<span class="hljs-regexp">/gpg | sudo gpg --dearmor -o /</span>etc<span class="hljs-regexp">/apt/</span>keyrings/docker.gpg<br>sudo chmod a+r <span class="hljs-regexp">/etc/</span>apt<span class="hljs-regexp">/keyrings/</span>docker.gpg<br></code></pre></td></tr></table></figure></li><li>配置仓库<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> \<br>  <span class="hljs-string">&quot;deb [arch=&quot;</span>$(dpkg --print-architecture)<span class="hljs-string">&quot; signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu \</span><br><span class="hljs-string">  &quot;</span>$(. /etc/os-release &amp;&amp; <span class="hljs-built_in">echo</span> <span class="hljs-string">&quot;<span class="hljs-variable">$VERSION_CODENAME</span>&quot;</span>)<span class="hljs-string">&quot; stable&quot;</span> | \<br>  sudo <span class="hljs-built_in">tee</span> /etc/apt/sources.list.d/docker.list &gt; /dev/null<br></code></pre></td></tr></table></figure></li><li>更新 apt 包<figure class="highlight pgsql"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs pgsql">sudo apt-<span class="hljs-keyword">get</span> <span class="hljs-keyword">update</span><br></code></pre></td></tr></table></figure></li></ol><h2 id="安装-Docker-Engine"><a href="#安装-Docker-Engine" class="headerlink" title="安装 Docker Engine"></a>安装 Docker Engine</h2><ol><li>安装 Docker Engine、containerd 和 Docker Compose<figure class="highlight stata"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs stata">sudo apt-get install docker-ce docker-ce-<span class="hljs-keyword">cli</span> containerd.io docker-buildx-<span class="hljs-keyword">plugin</span> docker-compose-<span class="hljs-keyword">plugin</span><br></code></pre></td></tr></table></figure></li><li>运行测试镜像，验证安装成功<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo docker <span class="hljs-built_in">run</span> hello-world<br></code></pre></td></tr></table></figure></li></ol><h1 id="安装与使用docker-compose"><a href="#安装与使用docker-compose" class="headerlink" title="安装与使用docker compose"></a>安装与使用docker compose</h1><h2 id="安装-docker-compose"><a href="#安装-docker-compose" class="headerlink" title="安装 docker compose"></a>安装 docker compose</h2><ul><li>对于 Ubuntu 和 Debian：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros">sudo apt-<span class="hljs-built_in">get</span> install docker-compose-plugin<br></code></pre></td></tr></table></figure></li><li>对于基于 RPM 的发行版：<figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> docker-compose-plugin<br></code></pre></td></tr></table></figure></li></ul><p>查看是否可以运行：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs applescript">docker compose <span class="hljs-built_in">version</span><br></code></pre></td></tr></table></figure><p>如果能正常显示版本，则安装成功，跳过下一步；否则需配置 docker-compose 路径</p><h2 id="配置-docker-compose-路径"><a href="#配置-docker-compose-路径" class="headerlink" title="配置 docker-compose 路径"></a>配置 docker-compose 路径</h2><ol><li>查看 docker-compose 当前所在路径<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">find</span> / -name docker-compose<br></code></pre></td></tr></table></figure>我得到的是<figure class="highlight awk"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs awk"><span class="hljs-regexp">/root/</span>.docker<span class="hljs-regexp">/cli-plugins/</span>docker-compose<br><span class="hljs-regexp">/usr/</span>libexec<span class="hljs-regexp">/docker/</span>cli-plugins/docker-compose<br></code></pre></td></tr></table></figure></li><li>在 ~&#x2F;.bashrc 中添加：<figure class="highlight routeros"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs routeros"><span class="hljs-built_in">export</span> <span class="hljs-attribute">PATH</span>=<span class="hljs-string">&quot;/usr/libexec/docker/cli-plugins:<span class="hljs-variable">$PATH</span>&quot;</span><br></code></pre></td></tr></table></figure>之后保存并关闭文件，运行<code>source ~/.bashrc</code>或重启终端即可。<blockquote><p>具体原理在另一篇博客《可执行文件与系统PATH环境变量》中有解释。</p></blockquote></li></ol><h2 id="使用-docker-compose"><a href="#使用-docker-compose" class="headerlink" title="使用 docker compose"></a>使用 docker compose</h2><p>在 docker-compose.yaml 所在目录执行<code>docker compose up</code>即可启动其中所有定义的容器，通过加<code>-d</code>参数可以后台启动。</p><h3 id="常用命令"><a href="#常用命令" class="headerlink" title="常用命令"></a>常用命令</h3><ul><li>docker compose up：启动容器。根据当前目录下的配置文件创建并启动所有定义的容器。如果如果容器不存在，将会下载所需的镜像。如果容器已存在，将会重新启动它们。默认情况下，它会在前台启动，并输出容器的日志信息。</li><li>docker compose down：停止并移除容器应用。停止并移除所有已经启动的容器，同时清理相关的网络和卷。</li><li>docker compose ps：列出当前已启动的容器。</li><li>docker compose start：启动已经创建但未运行的容器。与 docker-compose up 相比，start 命令只会启动已经创建的容器，而不会重新构建或重新创建容器。</li><li>docker compose stop：停止正在运行的容器。与 docker-compose down 相比，stop 命令只会停止容器，而不会移除它们。</li><li>docker compose build：构建或重新构建镜像。它会根据配置文件中定义的构建规则，构建或重新构建容器所需的镜像。</li></ul><blockquote><p>可以通过<code>docker-compose --help</code>命令来查看完整的命令列表和使用说明。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>docker</tag>
      
      <tag>docker compose</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>可执行文件与系统PATH环境变量</title>
    <link href="/2023/10/01/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%8E%E7%B3%BB%E7%BB%9FPATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/"/>
    <url>/2023/10/01/%E5%8F%AF%E6%89%A7%E8%A1%8C%E6%96%87%E4%BB%B6%E4%B8%8E%E7%B3%BB%E7%BB%9FPATH%E7%8E%AF%E5%A2%83%E5%8F%98%E9%87%8F/</url>
    
    <content type="html"><![CDATA[<h1 id="问题背景"><a href="#问题背景" class="headerlink" title="问题背景"></a>问题背景</h1><p>我在下载 k9s 压缩包并解压后，得到了一个 k9s 的可执行文件，但是直接在终端中使用 k9s 却显示<code>k9s: command not found</code>，即使是在 k9s 所在的目录执行也是如此。之后才重新认识了系统 PATH 环境变量。</p><h1 id="系统-PATH-环境变量"><a href="#系统-PATH-环境变量" class="headerlink" title="系统 PATH 环境变量"></a>系统 PATH 环境变量</h1><h2 id="1-定义与作用"><a href="#1-定义与作用" class="headerlink" title="1. 定义与作用"></a>1. 定义与作用</h2><p>系统 PATH 环境变量是一个存储操作系统用于查找可执行文件的路径列表。它包含一系列目录路径，操作系统会按照这些路径的顺序来搜索和查找命令行工具和可执行文件。</p><p>所以它的作用也就显而易见了：方便用户在命令行中直接使用可执行程序，而不需要提供完整的路径。当然，这些可执行程序必须在系统 PATH 环境变量中，不在系统 PATH 环境变量中的可执行程序则需要提供具体的路径才能够识别该命令。</p><blockquote><p>另外，系统 PATH 环境变量中的一系列目录路径是有先后顺序的，当搜索到输入的命令时，就不会再继续搜索，后面的路径中如果有相同的命令也不会执行。</p></blockquote><h2 id="2-包含哪些路径"><a href="#2-包含哪些路径" class="headerlink" title="2. 包含哪些路径"></a>2. 包含哪些路径</h2><h4 id="查询"><a href="#查询" class="headerlink" title="查询"></a>查询</h4><ul><li>Windows 命令提示符，结果以“;”分隔<figure class="highlight dos"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs dos"><span class="hljs-built_in">echo</span> <span class="hljs-variable">%PATH%</span><br></code></pre></td></tr></table></figure></li><li>Linux 和 macOS 终端，结果以“:”分隔<figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash"><span class="hljs-built_in">echo</span> <span class="hljs-variable">$PATH</span><br></code></pre></td></tr></table></figure></li></ul><p>输入对应的命令可以看到系统 PATH 环境变量有哪些，在 Linux 中，它们通常是各种 &#x2F;bin 和 &#x2F;sbin 目录。</p><h4 id="Linux中常用的路径及其区别"><a href="#Linux中常用的路径及其区别" class="headerlink" title="Linux中常用的路径及其区别"></a>Linux中常用的路径及其区别</h4><ul><li>&#x2F;bin 和 &#x2F;sbin：包含的是系统启动和基本功能所需的命令；</li><li>&#x2F;usr&#x2F;bin 和 &#x2F;usr&#x2F;sbin：包含的是大多数用户级别的命令和一些系统管理命令；</li><li>&#x2F;usr&#x2F;local&#x2F;bin 和 &#x2F;usr&#x2F;local&#x2F;sbin：包含用户自行安装的软件或脚本。<blockquote><p>&#x2F;sbin 中的命令通常需要管理员权限。</p></blockquote></li></ul><h2 id="使用不在系统-PATH-环境变量的可执行文件"><a href="#使用不在系统-PATH-环境变量的可执行文件" class="headerlink" title="使用不在系统 PATH 环境变量的可执行文件"></a>使用不在系统 PATH 环境变量的可执行文件</h2><p>很简单，将其移动到系统 PATH 环境变量所包含的路径即可，一般情况下就将其复制或移动到 &#x2F;usr&#x2F;local&#x2F;bin 中。当然，使用绝对路径或者相对路径也可以，不多长远来看肯定会麻烦许多。</p><blockquote><p>还有一种方法是修改系统 PATH 环境变量，使其包含该可执行文件所在的目录，方法就是编辑 ~&#x2F;.bashrc 或 ~&#x2F;.bash_profile 环境变量文件，在 PATH 变量的值中添加路径，多个路径之间用“:”分隔。如：<code>export PATH=&quot;/new/path:$PATH&quot;</code>。<br>之后保存并关闭文件，运行<code>source ~/.bashrc</code>或<code>source ~/.bash_profile</code>使修改生效即可。</p></blockquote>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>PATH</tag>
      
      <tag>可执行文件</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>EUR的基本使用</title>
    <link href="/2023/09/25/EUR%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/"/>
    <url>/2023/09/25/EUR%E7%9A%84%E5%9F%BA%E6%9C%AC%E4%BD%BF%E7%94%A8/</url>
    
    <content type="html"><![CDATA[<p>首先注册&#x2F;登录 openEuler 账号，进入软件仓库首页<a href="https://eur.openeuler.openatom.cn/coprs/">https://eur.openeuler.openatom.cn/coprs/</a></p><h1 id="一、创建一个新项目"><a href="#一、创建一个新项目" class="headerlink" title="一、创建一个新项目"></a>一、创建一个新项目</h1><p>点击 New Project 开始创建，需要填写的有：</p><ul><li>Project Name：项目名称，后续无法修改</li><li>Chroots：选择本项目要用到的 openEuler 版本及架构，必须配置，后续可修改</li></ul><p>点击 Create 完成创建</p><h1 id="二、在项目中构建一个软件包"><a href="#二、在项目中构建一个软件包" class="headerlink" title="二、在项目中构建一个软件包"></a>二、在项目中构建一个软件包</h1><ol><li><p>openEuler 的软件包仓库：<a href="https://gitee.com/organizations/src-openeuler/projects">https://gitee.com/organizations/src-openeuler/projects</a>，在其中选择一个软件包，复制其 url。</p></li><li><p>在 Package 中选择 New Package 新建一个软件包，输入包名和 Clone url，点击 Rebuild 开始构建。</p></li></ol><blockquote><p>Committish：可选项，如果想构建某个分支，则填入分支名称。默认为 master 分支。<br>chroots：选择合适的chroot进行构建，本次构建的软件包只能在选中的chroot.repo中找到，且如果构建了同一个软件包的不同版本，则在后面更新时只会显示最新的一个版本。</p></blockquote><ol start="3"><li>在 Builds 中可以看到构建过的软件包，通常构建一个软件包会持续几分钟的时间。在 Build ID 中可以看到软件包的详细信息，下方的 Logs 中可以看到构建日志。</li></ol><h1 id="三、应用构建成功的软件包"><a href="#三、应用构建成功的软件包" class="headerlink" title="三、应用构建成功的软件包"></a>三、应用构建成功的软件包</h1><ol><li>在 openEuler 下载个人仓库配置</li></ol><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs xml">curl -L -o <span class="hljs-tag">&lt;<span class="hljs-name">文件路径</span>&gt;</span> <span class="hljs-tag">&lt;<span class="hljs-name">链接地址</span>&gt;</span><br></code></pre></td></tr></table></figure><p>其中文件路径为 &#x2F;etc&#x2F;yum.repos.d&#x2F;xxx.repo，链接地址由个人仓库 Overview 页面下 Repo Download 右键复制得到。</p><blockquote><p>直接点击会看到该仓库的具体内容，所以也可以复制其内容，手动在指定路径添加该文件。</p></blockquote><ol start="2"><li>安装或更新软件包</li></ol><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span><br>yum update<br></code></pre></td></tr></table></figure><p>配置仓库后，就可以应用仓库中的软件包进行安装或更新了。</p>]]></content>
    
    
    
    <tags>
      
      <tag>EUR</tag>
      
      <tag>openEuler</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在 openEuler 进行RPM打包</title>
    <link href="/2023/09/02/%E5%9C%A8%20openEuler%20%E4%B8%8A%E8%BF%9B%E8%A1%8CRPM%E6%89%93%E5%8C%85/"/>
    <url>/2023/09/02/%E5%9C%A8%20openEuler%20%E4%B8%8A%E8%BF%9B%E8%A1%8CRPM%E6%89%93%E5%8C%85/</url>
    
    <content type="html"><![CDATA[<h1 id="准备工作"><a href="#准备工作" class="headerlink" title="准备工作"></a>准备工作</h1><ol><li><p>安装 openEuler<br>在应用商店下载即可。</p></li><li><p>安装 rpmbuild</p><figure class="highlight cmake"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs cmake">yum <span class="hljs-keyword">install</span> rpmdevtools<br></code></pre></td></tr></table></figure></li><li><p>创建工作目录</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">rpmdev-setuptree</span><br></code></pre></td></tr></table></figure><blockquote><p>这一步执行完后会在用户家目录下生成一个 rpmbuild 文件，其包含五个子目录，这将是 RPM 打包过程的“工作车间”。</p></blockquote></li><li><p>安装git</p></li></ol><h1 id="预备知识"><a href="#预备知识" class="headerlink" title="预备知识"></a>预备知识</h1><ol><li>打包过程的“工作车间”</li></ol><ul><li>BUILD：源码包被解压至此，并在该目录的子目录完成编译，宏为 %_builddir</li><li>BUILDROOT：保存 %install 阶段安装的文件，宏为 %_buildrootdir</li><li>RPMS：生成&#x2F;保存二进制 RPM 包，宏为 %_rpmdir</li><li>SOURCES：保存源码包（如 .tar 包）和所有 patch 补丁，宏为 %_sourcedir</li><li>SPECS：保存 RPM 包配置（.spec）文件，宏为 %_specdir</li><li>SRPMS：生成&#x2F;保存源码 RPM 包(SRPM)，宏为 %_srcrpmdir</li><li>~&#x2F;rpmbuild 的宏为 %_topdir</li></ul><ol start="2"><li>spec 文件<br>RPM 打包过程最重要的一步是编辑 spec 文件，虽然通常都会有现成的 spec 文件，但是学习其中的内容对理解打包过程很有帮助，也不至于在看到报错时一头雾水。</li></ol><details><summary>spec 文件示例</summary><figure class="highlight haml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br></pre></td><td class="code"><pre><code class="hljs haml">Name: mypackage<br>Version: 1.0.0<br>Release: 1%&#123;?dist&#125;<br>Summary: My Package - An Example Package<br>License: MIT<br><br># 指定源代码文件或源代码压缩包的URL<br>Source0: %&#123;name&#125;-%&#123;version&#125;.tar.gz<br><br># 构建所需的依赖包列表<br>BuildRequires: gcc<br>BuildRequires: make<br><br># 安装所需的运行时依赖包列表<br>Requires: libfoo &gt;= 1.2.3<br>Requires: libbar &gt;= 2.0<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">description</span></span><br>My Package is an example package that demonstrates RPM packaging.<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">prep</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">setup</span></span> -q<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">build</span></span><br># 在这里进行构建操作，例如编译源代码<br>make<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">install</span></span><br># 在这里进行安装操作，将构建好的文件安装到指定位置<br>make install DESTDIR=%&#123;buildroot&#125;<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">files</span></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">doc</span></span><br># 列出要打包的文件和目录，以及其在安装位置的对应<br><span class="hljs-tag">%&#123;_bindir&#125;</span>/mybinary<br><span class="hljs-tag">%&#123;_datadir&#125;</span>/mypackage/<br><span class="hljs-tag">%&#123;_mandir&#125;</span>/man1/mybinary.1.gz<br><span class="hljs-tag"></span><br><span class="hljs-tag">%<span class="hljs-selector-tag">changelog</span></span><br>* Mon Aug 15 2023 John Doe &lt;johndoe@example.com&gt; 1.0.0-1<br>-<span class="language-ruby"> 初始版本</span><br></code></pre></td></tr></table></figure></details> <h1 id="一、下载源码包"><a href="#一、下载源码包" class="headerlink" title="一、下载源码包"></a>一、下载源码包</h1><p>可以在 <a href="https://gitee.com/organizations/src-openeuler/projects">https://gitee.com/organizations/src-openeuler/projects</a> 下载源码包，源码包中包含 .spec 文件。</p><ul><li><p><code>git clone</code> 源码包到 rpmbuild&#x2F;SOURCES&#x2F; 目录下，点击“克隆&#x2F;下载”可获取源码链接；</p></li><li><p>若未安装 git，可在“克隆&#x2F;下载”选择“下载zip”，手动将压缩包下载到本地，然后在文件资源管理器的路径中输入 <code>\\wsl$</code>，直接访问 WSL 中的文件，然后将源码包解压缩到 rpmbuild&#x2F;SOURCES&#x2F; 目录下。（不推荐用这种方法下载，但是直接访问 WSL 中的文件有助于后面的理解）</p></li></ul><h1 id="二、安装依赖包"><a href="#二、安装依赖包" class="headerlink" title="二、安装依赖包"></a>二、安装依赖包</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">dnf builddep xxx.<span class="hljs-keyword">spec</span><br></code></pre></td></tr></table></figure><blockquote><p>在构建一个 RPM 包之前，需要先安装其所需的依赖包，这些依赖会在 .spec 文件中的 requires 中标明。</p></blockquote><h1 id="三、构建RPM包"><a href="#三、构建RPM包" class="headerlink" title="三、构建RPM包"></a>三、构建RPM包</h1><figure class="highlight crmsh"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs crmsh">rpmbuild -ba xxx.<span class="hljs-keyword">spec</span> -D <span class="hljs-string">&quot;_sourcedir &#x27;pwd&#x27;&quot;</span><br></code></pre></td></tr></table></figure><blockquote><p>-ba 参数代表同时制作二进制格式和源码格式的 RPM 包。在实际构建过程中，可以依次选择以下三个参数来查看对应阶段是否有错误，返回0则说明无误。每次构建都会删除之前安装的文件然后从头开始。<br><code>-D &quot;_sourcedir &#39;pwd&#39;&quot;</code>的作用是使%{_sourcedir}代表的路径变为当前所在路径。默认路径是到 SOURCES&#x2F;，如果该软件包所需的文件都在 SOURCES&#x2F; 目录下，则不需要加此参数。</p></blockquote><figure class="highlight mipsasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs mipsasm">rpmbuild -<span class="hljs-keyword">bp </span> <span class="hljs-comment"># 执行到 %prep 阶段停止</span><br><br>rpmbuild -<span class="hljs-keyword">bc </span> <span class="hljs-comment"># 执行到 %build 阶段停止</span><br><br>rpmbuild -<span class="hljs-keyword">bi </span> <span class="hljs-comment"># 执行到 %install 阶段停止</span><br></code></pre></td></tr></table></figure><blockquote><p>另外，可以分别使用<code>rpmbuild -bb</code>仅制作二进制格式的 RPM 包，或<code>rpmbuild -bs</code>仅制作源码格式的 RPM 包。</p></blockquote><p>执行完这一步，一个软件包的打包就已经完成了。</p><h1 id="四、安装或升级RPM包"><a href="#四、安装或升级RPM包" class="headerlink" title="四、安装或升级RPM包"></a>四、安装或升级RPM包</h1><figure class="highlight nginx"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs nginx"><span class="hljs-attribute">rpm</span> -ivh xxx.rpm  <span class="hljs-comment"># 安装</span><br>rpm -Uvh xxx.rpm  <span class="hljs-comment"># 升级</span><br></code></pre></td></tr></table></figure><p>在 RPMS&#x2F; 目录里找到上一步构建的二进制包，并用该命令安装&#x2F;升级。通常上一步不会只生成一个 .rpm 文件，其中名字中有 debuginfo 和 debugseurce 的 rpm 包通常不需要安装&#x2F;升级，而其他的 rpm 包如果有多个则需要一起安装&#x2F;升级，用空格隔开。</p><p>安装完成后可以使用<code>rpm -q xxx</code>或<code>rpm -qi xxx</code>查看软件包版本或详细信息。</p><h1 id="五、一些-error"><a href="#五、一些-error" class="headerlink" title="五、一些 error"></a>五、一些 error</h1><pre><code class="hljs">1. error: failed build dependence</code></pre><p>构建过程出错，未安装依赖包，用<code>dnf builddep xxx.spec</code>安装所有依赖包，或<code>yum install</code>安装依赖包</p><pre><code class="hljs">2. ... conflicts with file from ...</code></pre><p>安装过程出错，提示安装的文件与已有文件冲突。我遇到的原因都是电脑已安装此软件包的其他版本，此时只需要把 -ivh 换为 -Uvh 即可，即以更新代替安装。这个错误在网上搜索时也有其他说法或解决方案，但本人暂时并未遇到</p><pre><code class="hljs">3. error: Failed dependence: ... is needed by ...</code></pre><p>安装或升级过程出错，未同时安装除 debug 之外的所有 rpm 包</p><pre><code class="hljs">4. install: cannot stat ... No such file or directory</code></pre><p>构建过程出错，与此错误对应的 spec 语句是<code>install -m 权限 文件 路径</code>，意为将某个文件复制到某个路径当中，但因未找到该文件而报错。首先应确定该文件的具体位置，我通过添加<code>-D &quot;_sourcedir &#39;pwd&#39;&quot;</code>后没有再出现这个错误。如果还是不行，可以尝试使 spec 文件中寻找该文件的路径和文件实际所在路径保持一致。</p>]]></content>
    
    
    
    <tags>
      
      <tag>openEuler</tag>
      
      <tag>Linux</tag>
      
      <tag>rpm</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>pyporter的使用与源码阅读</title>
    <link href="/2023/08/10/pyporter%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/"/>
    <url>/2023/08/10/pyporter%E7%9A%84%E4%BD%BF%E7%94%A8%E4%B8%8E%E6%BA%90%E7%A0%81%E9%98%85%E8%AF%BB/</url>
    
    <content type="html"><![CDATA[<h1 id="pyporter的使用"><a href="#pyporter的使用" class="headerlink" title="pyporter的使用"></a>pyporter的使用</h1><h3 id="下载安装pyporter"><a href="#下载安装pyporter" class="headerlink" title="下载安装pyporter"></a>下载安装pyporter</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs bash">yum install gcc gdb libstdc++-devel python3-cffi rpmdevtools wheel<br>git <span class="hljs-built_in">clone</span> https://gitee.com/openeuler/pyporter.git<br><span class="hljs-built_in">cd</span> pyporter<br>pip install .<br></code></pre></td></tr></table></figure><p>之后能使用<code>pyporter -h</code>查看帮助就说明安装成功了</p><h3 id="极简使用"><a href="#极简使用" class="headerlink" title="极简使用"></a>极简使用</h3><p>在PyPI官网<a href="https://pypi.org/">https://pypi.org/</a>可以看到众多python包，只需要知道包名就可以使用以下两条命令极速安装</p><ol><li>安装依赖包<figure class="highlight arcade"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs arcade">pip install $(pyporter -R xxx)<br></code></pre></td></tr></table></figure></li><li>构建并安装RPM包 <figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">pyporter</span> -<span class="hljs-keyword">B</span> xxx<br></code></pre></td></tr></table></figure></li></ol><h3 id="其他命令"><a href="#其他命令" class="headerlink" title="其他命令"></a>其他命令</h3><ol><li>输出 spec 文件<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pyporter -s xxx</span><br></code></pre></td></tr></table></figure><blockquote><p>此命令仅将文件内容输出到终端，再加上<code>-o xxx.spec</code>可生成 spec 文件</p></blockquote></li><li>输出依赖包<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pyporter -R xxx</span><br></code></pre></td></tr></table></figure></li><li>下载源文件<figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">pyporter -d xxx</span><br></code></pre></td></tr></table></figure></li><li>构建 rpm 包<figure class="highlight armasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs armasm"><span class="hljs-symbol">pyporter</span> -<span class="hljs-keyword">b</span> xxx<br></code></pre></td></tr></table></figure></li><li>在 ROOTPATH 中构建 rpm 包<figure class="highlight diff"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs diff"><span class="hljs-deletion">-r ROOTPATH</span><br></code></pre></td></tr></table></figure></li></ol><h3 id="一些问题"><a href="#一些问题" class="headerlink" title="一些问题"></a>一些问题</h3><ol><li>无法正确匹配某些依赖，有时会造成依赖空白，有时无法匹配完整的依赖名称。</li><li>pyporter 默认使用 setuptools 工具进行安装，对应 %build 过程的 %py3_build，此时应当有 setup.py 文件。但某些软件包使用其他工具安装，如 pyproject.toml，此时应使用 %pyproject，使用 %py3_build 则会出错。</li></ol><blockquote><p>以上问题都可以通过阅读 pyporter 源码发现问题所在地，之后可能会修复。</p></blockquote><h1 id="pyporter-源码阅读"><a href="#pyporter-源码阅读" class="headerlink" title="pyporter 源码阅读"></a>pyporter 源码阅读</h1><h3 id="PyPorter-类"><a href="#PyPorter-类" class="headerlink" title="PyPorter 类"></a>PyPorter 类</h3><p>在<code>__init__()</code>中调用<code>retry_call()</code>函数，使<code>do_init()</code>在运行失败时能自动重试一定次数，提高了稳定性。在<code>do_init()</code>函数中会从 pypi.org 下载数据保存到<code>self.__json</code>中，包括包名、版本号、架构、摘要等信息。PyPorter类中定义的大多数函数都是为了获取这些信息从而进一步编写 spec 文件。</p><h3 id="main-函数"><a href="#main-函数" class="headerlink" title="main 函数"></a>main 函数</h3><figure class="highlight python"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br></pre></td><td class="code"><pre><code class="hljs python"><span class="hljs-keyword">def</span> <span class="hljs-title function_">main</span>():<br>    <span class="hljs-comment"># 定义当前用户主目录路径</span><br>    dft_root_path = os.path.join(<span class="hljs-built_in">str</span>(Path.home()))<br><br>    <span class="hljs-comment"># 在 do_args() 中建立解析对象 parser 并为其添加属性</span><br>    parser = do_args(dft_root_path)<br>    <span class="hljs-comment"># 把添加的属性给args实例</span><br>    args = parser.parse_args()<br><br>    <span class="hljs-comment"># 通过 porter_creator() 创建一个PyPorter实例</span><br>    porter = porter_creator(args)<br><br>    <span class="hljs-comment"># 如果参数是requires(-R, --requires)，每行打印出一个依赖</span><br>    <span class="hljs-keyword">if</span> args.requires:<br>        req_list = porter.get_build_requires()<br>        <span class="hljs-keyword">if</span> req_list <span class="hljs-keyword">is</span> <span class="hljs-keyword">not</span> <span class="hljs-literal">None</span>:<br>            <span class="hljs-built_in">print</span>(<span class="hljs-string">&#x27;\n&#x27;</span>.join(req_list))<br><br>    <span class="hljs-comment"># 如果参数是spec(-s, --spec)，创建 .spec 文件</span><br>    <span class="hljs-keyword">elif</span> args.spec:<br>        build_spec(porter, args.output)<br><br>    <span class="hljs-comment"># 如果参数是build(-b, --build)，构建RPM包（相当于rpmbuild -ba），期间会创建.spec文件，下载源码包</span><br>    <span class="hljs-keyword">elif</span> args.build:<br>        ret = build_rpm(porter, args.rootpath)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-string">&quot;&quot;</span>:<br>            logger.error(<span class="hljs-string">f&quot;build failed : BuildRequire : <span class="hljs-subst">&#123;ret&#125;</span>&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 如果参数是buildinstall(-B)，构建并安装RPM包（相当于rpmbuild -ba，rpm -ivh）</span><br>    <span class="hljs-keyword">elif</span> args.buildinstall:<br>        ret = build_install_rpm(porter, args.rootpath)<br>        <span class="hljs-keyword">if</span> ret != <span class="hljs-string">&quot;&quot;</span>:<br>            logger.error(<span class="hljs-string">&quot;Build &amp; install failed\n&quot;</span>)<br>            sys.exit(<span class="hljs-number">1</span>)<br><br>    <span class="hljs-comment"># 如果参数是downlond(-d, --download)，下载源码包</span><br>    <span class="hljs-keyword">elif</span> args.download:<br>        download_source(porter, args.path)<br><br>    <span class="hljs-comment"># 如果参数是json（-j, --json)，保存json文件</span><br>    <span class="hljs-keyword">elif</span> args.json:<br>        porter.store_json(args.path)<br></code></pre></td></tr></table></figure><ul><li>在<code>do_args(dft_root_path)</code>函数中，先使用<code>argparse.ArgumentParser()</code>创建一个解释器对象，再使用<code>parser.add_argument()</code>添加命令行参数。如:<br><code>parser.add_argument(&quot;-v&quot;, &quot;--pkgversion&quot;, help=&quot;Specify the pypi package version&quot;, type=str, default=&quot;&quot;)</code><blockquote><p><code>-v</code>和<code>--pkgversion</code>添加了两个形式的命令行参数，这两个形式都可以指定该命令行参数，解析器会解析命令行参数，并将其存储在相应变量中供程序使用；<br><code>help=&quot;Specify the pypi package version&quot;</code>指定了该命令行参数的帮助信息，当用户使用<code>-h</code>或<code>--help</code>参数时会显示这个帮助信息；<br><code>type=str</code>指定了该命令行参数类型为字符串类型；<br><code>default=&quot;&quot;</code>指定了该命令行参数的默认值为空字符串；</p></blockquote></li><li>在<code>build_spec(porter, output)</code>函数中，先通过<code>sys.stdout = open(output, &#39;w+&#39;, encoding=&#39;utf-8&#39;) </code>重定向所有写入内容到 spec 文件，再通过<code>print()</code>向文件中写入内容。</li><li>在<code>build_rpm(porter, rootpath)</code>函数中，若目录 SPECS, BUILD, SOURCES, SRPMS, RPMS, BUILDROOT 中有缺失，则会先创建缺失目录，之后在 SPECS 目录下创建 spec 文件，在 SOURCES 目录下下载源码包，然后执行<code>rpmbuild -ba</code>命令。</li><li>在<code>build_install_rpm(porter, rootpath)</code>函数中，先执行<code>build_rpm(porter, rootpath)</code>，再根据其架构找到构建的RPM包，执行<code>rpm -ivh</code>命令</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>Linux</tag>
      
      <tag>pyporter</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>在GitHub Pages上搭建个人博客</title>
    <link href="/2023/08/02/%E5%9C%A8GitHub%20Pages%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/"/>
    <url>/2023/08/02/%E5%9C%A8GitHub%20Pages%E4%B8%8A%E6%90%AD%E5%BB%BA%E4%B8%AA%E4%BA%BA%E5%8D%9A%E5%AE%A2/</url>
    
    <content type="html"><![CDATA[<h1 id="一、搭建个人-GitHub-Pages"><a href="#一、搭建个人-GitHub-Pages" class="headerlink" title="一、搭建个人 GitHub Pages"></a>一、搭建个人 GitHub Pages</h1><ul><li><p>使用<code>GitHub</code>创建个人仓库，此仓库用于存放个人博客界面，仓库名为<code>&lt;GitHub用户名&gt;.github.io</code>;</p></li><li><p>在仓库下创建名为<code>index.html</code>的静态<code>HTML</code>文件来验证个人博客搭建是否成功：</p><figure class="highlight xml"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs xml"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Someone&#x27;s Blog<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">h1</span>&gt;</span>Hello, Blog World ~<span class="hljs-tag">&lt;/<span class="hljs-name">h1</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">html</span>&gt;</span><br></code></pre></td></tr></table></figure></li><li><p>个人博客主页访问地址为<code>https://&lt;GitHub 用户名&gt;.github.io</code>，如果能在浏览器中正常访问该地址，说明个人<code>GitHub Pages</code>搭建成功。</p></li></ul><h1 id="二、安装-Git-和-Node-JS"><a href="#二、安装-Git-和-Node-JS" class="headerlink" title="二、安装 Git 和 Node JS"></a>二、安装 Git 和 Node JS</h1><ul><li><code>Git</code>官方下载地址 <a href="https://git-scm.com/">https://git-scm.com/</a>；</li><li><code>Node JS</code>官方下载地址 <a href="https://nodejs.org/zh-cn/download">https://nodejs.org/zh-cn/download</a>。</li></ul><h1 id="三、安装-Hexo"><a href="#三、安装-Hexo" class="headerlink" title="三、安装 Hexo"></a>三、安装 Hexo</h1><ul><li><p>全局安装<code>hexo-cli</code>工具：</p><figure class="highlight avrasm"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs avrasm">npm install -g hexo-<span class="hljs-keyword">cli</span><br></code></pre></td></tr></table></figure></li><li><p>创建一个项目<code>my_blog</code>并初始化：</p><figure class="highlight applescript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs applescript">hexo init my_blog<br>cd <span class="hljs-keyword">my</span>-blog<br>npm install<br></code></pre></td></tr></table></figure></li></ul><blockquote><p>更多说明详见官方文档：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>。</p></blockquote><h1 id="四、创建文章"><a href="#四、创建文章" class="headerlink" title="四、创建文章"></a>四、创建文章</h1><ul><li>使用<code>hexo new &quot;title&quot;</code>命令新建名为<code>title</code>的文章，在<code>my_blog\source\posts</code>下自动生成<code>.md</code>文件（重要）；</li><li>使用<code>Markdown</code>语法编辑此<code>.md</code>文件，即可编辑文章内容；</li><li>使用<code>hexo s</code>启动服务，在<a href="http://localhost:4000/">http://localhost:4000</a>界面浏览文章，期间每次编辑并保存<code>.md</code>文件后都可以通过刷新此界面浏览更新后的文章。</li></ul><blockquote><p>如果希望插入图片，则需先将图片放入本地对应文章的对应文件夹下，使用<code>hexo g &amp;&amp; hexo d</code>将图片推送到远程仓库，之后之后就可以正常显示图片了。<br>图片路径使用在仓库中的绝对路径：<code>![图片描述](path/to/图片)</code>。</p></blockquote><h1 id="五、发布-GitHub-Pages"><a href="#五、发布-GitHub-Pages" class="headerlink" title="五、发布 GitHub Pages"></a>五、发布 GitHub Pages</h1><ul><li><p>安装 <code>hexo-deploy-git</code>：</p><figure class="highlight ada"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ada">npm install hexo-deployer-git <span class="hljs-comment">--save</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>_config.yml</code>修改站点配置：</p><figure class="highlight dts"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs dts"><span class="hljs-symbol">deploy:</span><br><span class="hljs-symbol">  type:</span> git<br><span class="hljs-symbol">  repo:</span> <span class="hljs-params">&lt;repository url&gt;</span> <span class="hljs-meta"># https:<span class="hljs-comment">//github.com/&lt;GitHub用户名&gt;/&lt;GitHub用户名&gt;.github.io.git</span></span><br><span class="hljs-symbol">  branch:</span> [branch]<br><span class="hljs-symbol">  token:</span> [token]<br></code></pre></td></tr></table></figure></li><li><p>生成站点文件并推送至远程GitHub仓库：</p><figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo deploy</span><br></code></pre></td></tr></table></figure></li><li><p>在<code>https://&lt;GitHub 用户名&gt;.github.io</code>中浏览刚刚发布的博客。</p></li></ul><h1 id="六、设置喜欢的主题"><a href="#六、设置喜欢的主题" class="headerlink" title="六、设置喜欢的主题"></a>六、设置喜欢的主题</h1><p>可在<a href="https://hexo.io/themes/">https://hexo.io/themes/</a>选择安装各种各样的主题，本博客使用的主题是“Fluid”。</p><h1 id="总结：发布博客三部曲"><a href="#总结：发布博客三部曲" class="headerlink" title="总结：发布博客三部曲"></a>总结：发布博客三部曲</h1><ol><li><p>新建文章：</p> <figure class="highlight gauss"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs gauss">hexo <span class="hljs-keyword">new</span> <span class="hljs-built_in">title</span><br></code></pre></td></tr></table></figure></li><li><p>编辑Markdown文件并预览：</p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo s</span><br></code></pre></td></tr></table></figure></li><li><p>发布：</p> <figure class="highlight ebnf"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs ebnf"><span class="hljs-attribute">hexo clean</span><br><span class="hljs-attribute">hexo g</span><br><span class="hljs-attribute">hexo d</span><br></code></pre></td></tr></table></figure></li></ol><h1 id="参考资料"><a href="#参考资料" class="headerlink" title="参考资料"></a>参考资料</h1><ul><li>Hexo Docs：<a href="https://hexo.io/zh-cn/">https://hexo.io/zh-cn/</a>。</li></ul>]]></content>
    
    
    
    <tags>
      
      <tag>hexo</tag>
      
    </tags>
    
  </entry>
  
  
  
  
</search>
